# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build backend and push to registry
on:
  workflow_dispatch:
    inputs:
      cd:
        description: cd
        required: false
        default: docker-compose-build.yml

env:
  PROJECT_ID: dataplatformcolgate # TODO: update Google Cloud project id
  GAR_LOCATION: us-east4 # TODO: update Artifact Registry location
  SERVICE: colgate-repo # TODO: update Cloud Run service name
  REGION: us-east4 # TODO: update Cloud Run service region
  REPOSITORY: colgate-repo
  GOOGLE_HOST: ${{ secrets.GOOGLE_HOST }}
  ENV: cloud

jobs:
  buid-push-gcr:
    permissions:
      contents: read
      id-token: write
      actions: write
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: backend-image
      GIT_TAG: v0.1.0
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      #configure workload Identity Federation via a credentials file
      - name: Authenticate google cloud service
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/671371757704/locations/global/workloadIdentityPools/githubactions/providers/github
          service_account: github-actions@dataplatformcolgate.iam.gserviceaccount.com
          export_environment_variables: true

      - name: Build docker image
        run: |-
          cd backend
          docker buildx build --platform linux/amd64 -t "us-east4-docker.pkg.dev/$PROJECT_ID/$SERVICE/$IMAGE_NAME:latest" -t "us-east4-docker.pkg.dev/$PROJECT_ID/$SERVICE/$IMAGE_NAME:$GIT_TAG" .

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Authenticate docker to cloud registry
        run: |-
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker us-east4-docker.pkg.dev --quiet

      - name: Push container to cloud registry
        run: docker push -a us-east4-docker.pkg.dev/$PROJECT_ID/$SERVICE/$IMAGE_NAME

      # END - Docker auth and build

      - name: Deploy container to cloud run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          flags: --service-account=github-actions@dataplatformcolgate.iam.gserviceaccount.com --port=8000
          service: colgate-repo-backend
          gcloud_component: beta
          allow: unauthenticated
          platform: managed
          # NOTE: If required, update to the appropriate source folder
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest

      - name: Start frontend workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: google-cloudrun-docker-frontend.yml
          ref: ${{ github.ref_name }}
