# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build Front and Push it to Registry

on:
  push:
    branches: [ "deployment-patch-1" ]

env:
  PROJECT_ID: dataplatformcolgate # TODO: update Google Cloud project id
  GAR_LOCATION: us-east4 	 # TODO: update Artifact Registry location
  SERVICE: colgate-repo  # TODO: update Cloud Run service name
  REGION: Northern Virginia # TODO: update Cloud Run service region

jobs:
  buid-push-gcr:
    name: Build and Push to GCP
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME : frontend-image
    steps:
      - name: Checkout
        uses: 'actions/checkout@v3'
#configure workload Identity Federation via a credentials file
      - name: Google Auth
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/671371757704/locations/global/workloadIdentityPools/githubactions/providers/github' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: 'github-actions@dataplatformcolgate.iam.gserviceaccount.com' # e.g. - my-service-account@my-project.iam.gserviceaccount.com
    
      - name: Build docker Image
        run: |-
          cd ColPal/frontend
          docker build -t "us-east4-docker.pkg.dev/$PROJECT_ID/$SERVICE/$IMAGE_NAME:latest" 
          

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        run: |-
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker us-east4-docker.pkg.dev --quiet

      - name: Build and Push Container
        env:
          GIT_TAG: v0.1.0
        run: |-
          docker tag $IMAGE_NAME:latest us-east4-docker.pkg.dev/$PROJECT_ID/colgate-repo/$IMAGE_NAME:latest
          docker tag $IMAGE_NAME:latest us-east4-docker.pkg.dev/$PROJECT_ID/colgate-repo/$IMAGE_NAME:$GIT_TAG
          docker push $IMAGE_NAME:latest us-east4-docker.pkg.dev/$PROJECT_ID/colgate-repo/$IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest us-east4-docker.pkg.dev/$PROJECT_ID/colgate-repo/$IMAGE_NAME:$GIT_TAG

      
      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: colgate-repo
          region: Northern Virginia
          # NOTE: If using a pre-built image, update the image name here
          image: $IMAGE_NAME:latest us-east4-docker.pkg.dev/$PROJECT_ID/colgate-repo/$IMAGE_NAME:latest

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
