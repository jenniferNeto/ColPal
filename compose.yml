services:
  django:
    hostname: django
    container_name: django
    build:
      context: ./backend
      dockerfile: dev.Dockerfile
    ports:
      - 8000:8000
    volumes:
      - ./backend:/backend
    environment:
      - SECRET_KEY=development_secret
      - DEBUG=1
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    command: sh -c "python manage.py migrate && python manage.py createadmin && python manage.py runserver 0.0.0.0:8000"

  nodejs:
    hostname: nodejs
    container_name: nodejs
    build:
      context: ./frontend
      dockerfile: dev.Dockerfile
    ports:
      - 3000:3000
    volumes:
      - ./frontend:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    command: sh -c "npm install && npm run start"

  db:
    image: postgres:latest
    ports: 
      - 5432:5432
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 10s
      retries: 5

networks:
  backend:
    name: colgate_network
    driver: bridge
