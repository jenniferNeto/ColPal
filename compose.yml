services:
  django:
    hostname: django
    container_name: django
    build:
      context: ./backend
      dockerfile: dev.Dockerfile
    ports:
      - 8000:8000
    volumes:
      - ./backend:/backend
    environment:
      - SECRET_KEY=development_secret
      - DEBUG=1
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    command: >
      bash -c "python manage.py migrate
      && python manage.py runserver 0.0.0.0:8000"
  nodejs:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend

  db:
    image: postgres
    ports: 
      - 5432:5432
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  backend:
    name: colgate_network
    driver: bridge
